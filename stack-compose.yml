version: '3'
networks:
 kong-net:
  driver: overlay

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:latest
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure      
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:0.14.1
    command: "kong migrations up"
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      KONG_PG_HOST: kong-database
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:0.14.1
    networks:
      - kong-net
    deploy:
      replicas: 10
      restart_policy:
        condition: on-failure 
    environment:
      KONG_PG_HOST: kong-database
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
            #      - kong-migration
      - kong-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8001:8001"
      - "8000:8000"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: bmtsys/konga_bmtech
    command: "-c prepare -a postgres -u postgresql://kong@kong-database:5432/konga_db"
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: bmtsys/konga_bmtech
    deploy:
      restart_policy:
        condition: on-failure
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"
##### Prom file

  prom:
    image: quay.io/prometheus/prometheus:v2.0.0
    volumes:
     - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
     - 9090:9090
    depends_on:
     - exporter
    networks:
      - kong-net   
  exporter:
    image: prom/node-exporter:latest
    ports:
     - "9100:9100"
    networks:
      - kong-net   
#    network_mode: host
  grafana:
    image: grafana/grafana
    ports:
     - "3000:3000"
    depends_on:
      - prom
    networks:
      - kong-net    

##### Wazuh file  


  wazuh:
    image: wazuh/wazuh:3.7.0_6.5.0
    hostname: wazuh-manager
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "1514:1514/udp"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
#      - "1516:1516"
    networks:
        - kong-net
#    volumes:
#      - my-path:/var/ossec/data:Z
#      - my-path:/etc/postfix:Z
#      - my-path:/etc/filebeat
#      - my-custom-config-path/ossec.conf:/wazuh-config-mount/etc/ossec.conf
#   command: ["echo 'hello world'"]
    depends_on:
      - logstash
  logstash:
    image: wazuh/wazuh-logstash:3.7.0_6.5.0
    hostname: logstash
    deploy:
      restart_policy:
        condition: on-failure
    #    volumes:
#      - my-path:/etc/logstash/conf.d:Z
    ports:
      - "5000:5000"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
    environment:
      - LS_HEAP_SIZE=2048m
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.0
    hostname: elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "9200:9200"
#      - "9300:9300"
    environment:
      - node.name=node-1
      - cluster.name=wazuh
      - network.host=0.0.0.0
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # mem_limit: 2g
#    volumes:
#      - my-path:/usr/share/elasticsearch/data:Z
    networks:
        - kong-net
  kibana:
    image: wazuh/wazuh-kibana:3.7.0_6.5.0
    hostname: kibana
    deploy:
      restart_policy:
        condition: on-failure
    #    ports:
#      - "5601:5601"
#    environment:
#      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - kong-net
    depends_on:
      - elasticsearch
    links:
      - elasticsearch:elasticsearch
      - wazuh:wazuh
  nginx:
    image: wazuh/wazuh-nginx:3.7.0_6.5.0
    hostname: nginx
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - NGINX_PORT=443
    ports:
      - "80:80"
      - "443:443"
#    volumes:
#      - my-path:/etc/nginx/conf.d:Z
    networks:
      - kong-net
    depends_on:
      - kibana
    links:
      - kibana:kibana

#####Portainer
  portainer:
    image: portainer/portainer
    ports:
      - "9000"
    networks:
      - kong-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

 ####### Central Hub
  central:
    # tag the image, so we can later push it
    image: bmtsys/central_hub

    # should Nginx crash, always restart it
    deploy:
      restart_policy:
        condition: on-failure

    # treat port 80 of the host as port 80 of the container
    ports:
      - 4000:80
    networks:
      - kong-net